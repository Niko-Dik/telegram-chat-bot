import asyncio
import time
from collections import defaultdict
from datetime import timedelta, datetime
import os

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus
from aiogram.types import ChatPermissions

from banned_words import BANNED_WORDS
from config import BOT_TOKEN, ADMIN_IDS, LOG_CHAT_ID, MAX_MESSAGES, FLOOD_SECONDS, FLOOD_MUTE_DURATION, WELCOME_MESSAGE
from filters import has_profanity, has_link

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
flood_control = defaultdict(list)

def parse_duration(duration_str):
    units = {"s": 1, "m": 60, "h": 3600}
    import re
    match = re.match(r"(\d+)([smh])", duration_str)
    if not match:
        return None
    value, unit = match.groups()
    return int(value) * units[unit]

async def log_action(text):
    if LOG_CHAT_ID:
        await bot.send_message(LOG_CHAT_ID, text)

@dp.message()
async def message_filter(message: types.Message):
    if not message.text:
        return

    uid = message.from_user.id
    now = time.time()
    flood_control[uid] = [t for t in flood_control[uid] if now - t < FLOOD_SECONDS]
    flood_control[uid].append(now)

    print(f"[–§–ª—É–¥] {message.from_user.full_name} ‚Üí {len(flood_control[uid])} —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ {FLOOD_SECONDS} —Å–µ–∫")

    if len(flood_control[uid]) > MAX_MESSAGES:
        print(f"[–ú—É—Ç] {message.from_user.full_name} ‚Äî –º—É—Ç–∏–º –∑–∞ —Ñ–ª—É–¥ ({len(flood_control[uid])} —Å–æ–æ–±—â–µ–Ω–∏–π)")
        
        until = datetime.now() + timedelta(seconds=FLOOD_MUTE_DURATION)
        await bot.restrict_chat_member(
            chat_id=message.chat.id,
            user_id=uid,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until
        )
        await message.reply("‚õî –§–ª—É–¥! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–º—É—á–µ–Ω.")
        await log_action(f"–ú—É—Ç –∑–∞ —Ñ–ª—É–¥: {message.from_user.full_name}")
        flood_control[uid] = []
        return

    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    is_admin = member.status in ("administrator", "creator")

    if has_profanity(message.text):
        await message.delete()
        await log_action(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}: –º–∞—Ç")

    elif has_link(message.text) and not is_admin:
        await message.delete()
        await log_action(f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.full_name}: —Å—Å—ã–ª–∫–∞")


from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@dp.chat_member()
async def on_user_join(event: types.ChatMemberUpdated):
    if event.new_chat_member.status != ChatMemberStatus.MEMBER:
        return

    user = event.new_chat_member.user
    name = user.full_name.strip().lower()
    username = (user.username or "").lower()

    # 1. –ö–∏–∫ –∑–∞ –ø—É—Å—Ç–æ–µ –∏–º—è
    if not name:
        await bot.kick_chat_member(event.chat.id, user.id)
        await log_action("üö´ –ö–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ: –ø—É—Å—Ç–æ–µ –∏–º—è")
        return

    # 2. –ö–∏–∫ –∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
    try:
        profile_photos = await bot.get_user_profile_photos(user.id)
        if profile_photos.total_count == 0:
            await bot.kick_chat_member(event.chat.id, user.id)
            await log_action(f"üö´ –ö–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ: –±–µ–∑ –∞–≤–∞—Ç–∞—Ä–∫–∏ ‚Äî {user.full_name}")
            return
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: {e}")

    # 3. –ö–∏–∫ –∑–∞ –º–∞—Ç –≤ –∏–º–µ–Ω–∏
    if any(bad_word in name for bad_word in BANNED_WORDS):
        await bot.kick_chat_member(event.chat.id, user.id)
        await log_action(f"üö´ –ö–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ: –∏–º—è —Å–æ–¥–µ—Ä–∂–∞–ª–æ –º–∞—Ç ‚Äî {user.full_name}")
        return

    # 4. –ö–∏–∫ –∑–∞ —Å–ª–æ–≤–æ "bot" –≤ –∏–º–µ–Ω–∏ –∏–ª–∏ username
    if "bot" in name or "bot" in username:
        await bot.kick_chat_member(event.chat.id, user.id)
        await log_action(f"üö´ –ö–∏–∫ –ø—Ä–∏ –≤—Ö–æ–¥–µ: –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –±–æ—Ç–∞ ‚Äî {user.full_name}")
        return

    # 5. –ú—É—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ "–±–æ—Ç–æ–ø–æ–¥–æ–±–Ω–æ–≥–æ" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user.username and any(char.isdigit() for char in name):
        until = datetime.now() + timedelta(minutes=30)
        await bot.restrict_chat_member(
            chat_id=event.chat.id,
            user_id=user.id,
            permissions=ChatPermissions(can_send_messages=False),
            until_date=until
        )
        await log_action(f"ü§ê –ú—É—Ç –ø—Ä–∏ –≤—Ö–æ–¥–µ: –±–æ—Ç–æ–ø–æ–¥–æ–±–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç ‚Äî {user.full_name}")
        return

    # ‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–∞–≤–∏–ª–∞"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìú –ü—Ä–∞–≤–∏–ª–∞", callback_data="show_rules")]
    ])
    await bot.send_message(
        event.chat.id,
        WELCOME_MESSAGE.format(username=user.full_name),
        reply_markup=keyboard
    )




@dp.message(Command("ban"))
async def ban_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    if not message.reply_to_message:
        await message.reply("–ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è.")
        return
    await message.chat.ban_user(message.reply_to_message.from_user.id)
    await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
    await log_action(f"–ë–∞–Ω: {message.reply_to_message.from_user.full_name}")

@dp.message(Command("kick"))
async def kick_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    args = message.text.split()

    if message.reply_to_message:
        target = message.reply_to_message.from_user
    elif len(args) == 2:
        user_ref = args[1]
        try:
            if user_ref.startswith("@"):
                member = await bot.get_chat_member(message.chat.id, user_ref)
            else:
                member = await bot.get_chat_member(message.chat.id, int(user_ref))
            target = member.user
        except:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
    else:
        await message.reply("–§–æ—Ä–º–∞—Ç: /kick @username –∏–ª–∏ /kick –ø–æ —Ä–µ–ø–ª–∞—é")
        return

    await message.chat.kick(target.id)
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.full_name} –∫–∏–∫–Ω—É—Ç.")
    await log_action(f"–ö–∏–∫: {target.full_name}")

@dp.message(Command("mute"))
async def mute_user(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return

    args = message.text.split()

    if len(args) == 2 and message.reply_to_message:
        target = message.reply_to_message.from_user
        duration = parse_duration(args[1])
    elif len(args) == 3:
        user_ref = args[1]
        duration = parse_duration(args[2])
        if not duration:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–∏–º–µ—Ä—ã: 10s, 5m, 1h")
            return
        try:
            if user_ref.startswith("@"):
                member = await bot.get_chat_member(message.chat.id, user_ref)
            else:
                member = await bot.get_chat_member(message.chat.id, int(user_ref))
            target = member.user
        except:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return
    else:
        await message.reply("–§–æ—Ä–º–∞—Ç: /mute @username 5m –∏–ª–∏ /mute 10m (–ø–æ —Ä–µ–ø–ª–∞—é)")
        return

    until = datetime.now() + timedelta(seconds=duration)
    await bot.restrict_chat_member(
        chat_id=message.chat.id,
        user_id=target.id,
        permissions=ChatPermissions(can_send_messages=False),
        until_date=until
    )
    await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target.full_name} –∑–∞–º—É—á–µ–Ω –Ω–∞ {args[-1]}")
    await log_action(f"–ú—É—Ç: {target.full_name} –Ω–∞ {args[-1]}")

@dp.message(Command("rules"))
async def send_rules(message: types.Message):
    with open("rules.txt", "r", encoding="utf-8") as f:
        await message.answer(f.read())

@dp.message(Command("settings"))
async def show_settings(message: types.Message):
    await message.reply(f"–§–∏–ª—å—Ç—Ä –º–∞—Ç–∞: –í–ö–õ\n–°—Å—ã–ª–∫–∏ –∑–∞–ø—Ä–µ—â–µ–Ω—ã: {'–î–∞' if not os.getenv('ALLOW_LINKS', 'False') == 'True' else '–ù–µ—Ç'}")
@dp.callback_query(lambda c: c.data == "show_rules")
async def show_rules_callback(callback: types.CallbackQuery):
    with open("rules.txt", "r", encoding="utf-8") as f:
        rules_text = f.read()
    await callback.message.answer(rules_text)
    await callback.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print("üîÅ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)



